name: 自动部署 - 从 public 解压并发布
description: 找出 public 文件夹中最新的 zip 包，解压后替换根目录内容，并自动提交。


author: Yian

# 输入参数
inputs:
  zip目录:
    description: "zip 文件所在的文件夹路径，默认是 public"
    required: false
    default: "public"

# 定义运行环境和步骤
runs:
  using: "composite"
  steps:
    # 第一步：拉取代码
    - name: 拉取代码
      uses: actions/checkout@v4

    # 第二步：检查 public 文件夹是否存在
    - name: 检查 zip 目录是否存在
      shell: bash
      run: |
        DIR="${{ inputs.zip目录 }}"
        if [ -d "$DIR" ]; then
          echo "✅ $DIR 目录存在"
        else
          echo "❌ 错误：$DIR 目录不存在！请确认有生成 zip 文件。" >&2
          exit 1
        fi

    # 第三步：找出最新的 zip 文件
    - name: 查找最新的 zip 文件
      id: find_zip 
      shell: bash
      run: |
        cd ${{ inputs.zip目录 }} || exit 1
        # 按时间排序，取第一个 zip 文件
        LATEST=$(ls -t *.zip 2>/dev/null | head -n 1)
        if [ -z "$LATEST" ]; then
          echo "❌ 没有在 ${{ inputs.zip目录 }} 找到任何 zip 文件"
          exit 1
        else
          echo "📦 找到最新压缩包：$LATEST"
          # 把结果存到环境变量，供后面使用
          echo "LATEST_ZIP=$LATEST" >> $GITHUB_ENV
        fi

    # 第四步：解压到 temp 文件夹
    - name: 解压文件到 temp
      shell: bash
      run: |
        unzip -o "${{ inputs.zip目录 }}/$LATEST_ZIP" -d ./temp
        echo "✅ 解压完成"

    # 第五步：清理根目录（保留 .git .github public）
    - name: 清理旧文件
      shell: bash
      run: |
        echo "🧹 开始清理根目录..."
        for item in ./*; do
          case "${item#./}" in
            .git|.github|public|temp)
              echo "🔁 保留: $item"
              ;;
            *)
              echo "🗑️ 删除: $item"
              rm -rf "$item"
              ;;
          esac
        done
        echo "✅ 清理完成"

    # 第六步：把解压的内容移到根目录
    - name: 移动新文件到根目录
      shell: bash
      run: |
        mv temp/* . || { echo "移动文件失败"; exit 1; }
        rm -rf temp || { echo "删除 temp 失败"; exit 1; }
        echo "✅ 文件已移动到根目录"

    # 第七步：删除 public 文件夹（可选）
    - name: 删除 public 目录
      shell: bash
      run: |
        rm -rf ${{ inputs.zip目录 }}
        echo "✅ 已删除 ${{ inputs.zip目录 }}"

    # 第八步：设置 Git 用户
    - name: 设置 Git 提交信息
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    # 第九步：提交并推送
    - name: 提交更改并推送
      shell: bash
      run: |
        git add .
        # 如果没有更改，就不提交
        git commit -m "🚀 自动部署：更新网站内容 [skip ci]" || echo "🔸 没有新更改，跳过提交"
        git push origin ${{ github.ref }} || echo "⚠️ 推送失败（可能无更改或分支受保护）"
